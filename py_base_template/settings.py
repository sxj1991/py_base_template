"""
Django settings for py_base_template project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import datetime
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-(+tq6xza1-qx_bz%g33h5%k0@(o!uyjj2yzid^6v)bns_$q=2i'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'apps.login.apps.LoginConfig',
    'apps.base_response.apps.ResponseConfig',
    'apps.org.apps.OrgConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apps.login.middleware.LoginMiddle',
]

ROOT_URLCONF = 'py_base_template.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'py_base_template.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# django 全局配置
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'py_base_template.auth.JwtAuthentication',  # 全局自定义认证器
    ],
    'EXCEPTION_HANDLER': 'py_base_template.exception.global_exception_handler',  # 异常处理器（捕获不了中间件异常）
}

# django 缓存
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'cache-snowflake'  # 本地缓存名称（自定义）
    }
}



# logging配置
LOG_PATH = BASE_DIR / 'log'
FILE_NAME = 'django.log'
LOGGING = {
    'version': 1,
    #  disable_existing_loggers 键被设置为 True 则默认配置中的所有记录器都将被禁用
    'disable_existing_loggers': False,
    # 日志格式化
    'formatters': {
        # 简单模式
        'simple': {
            'class': 'logging.Formatter',
            'format': '%(asctime)s %(levelname)s %(name)s %(filename)s %(module)s %(funcName)s '
                      '%(lineno)d %(thread)d %(threadName)s %(process)d %(processName)s %(message)s'
        },
        # json模式, 方便ELK收集处理
        'json': {
            'class': 'logging.Formatter',
            'format': '{"time:":"%(asctime)s","level":"%(levelname)s","logger_name":"%(name)s",'
                      '"file_name":"%(filename)s","module":"%(module)s","func_name":"%(funcName)s",'
                      '"line_number":"%(lineno)d","thread_id":"%(thread)d","thread_name":"%(threadName)s",'
                      '"process_id":"%(process)d","process_name":"%(processName)s","message":"%(message)s"}'}
    },
    # 过滤器
    # 可对日志数据进一步处理
    # 处理器
    'handlers': {
        # 控制台输出
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'INFO',
            'formatter': 'simple'
        },
        # info文件输出
        'info_file': {
            'level': 'INFO',
            'formatter': 'json',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': '{0}/{1}_info.log'.format(LOG_PATH, FILE_NAME),
            'when': "d",
            'interval': 1,
            'encoding': 'utf8',
            'backupCount': 30

        },
        # error文件输出
        'error_file': {
            'level': 'ERROR',
            'formatter': 'json',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': '{0}/{1}_error.log'.format(LOG_PATH, FILE_NAME),
            'when': "d",
            'interval': 1,
            'encoding': 'utf8',
            'backupCount': 30

        }
    },
    # 记录器
    'loggers': {
        'full_logger': {
            'handlers': ['console', 'info_file', 'error_file'],
            'level': 'INFO'
        },
        'only_console_logger': {
            'handlers': ['console'],
            'level': 'INFO'
        },
        'only_file_logger': {
            'handlers': ['info_file', 'error_file']
        }
    }
}
